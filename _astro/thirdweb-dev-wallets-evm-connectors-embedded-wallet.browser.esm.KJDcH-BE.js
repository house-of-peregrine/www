import{C as w,_ as s,w as g,a as u,b as r,c as o,E as p,U as f,A as c,g as y,n as E}from"./Login.VljSKXrW.js";import"./jsx-runtime.7BJwlAz-.js";import"./index.9orYzNvn.js";import"./tokens.xyBxlAX2.js";import"./index.JdUBUp0J.js";var n=new WeakMap,a=new WeakMap;class I extends w{constructor(e){super(),s(this,"id",g.paper),s(this,"name","Embedded Wallet"),s(this,"ready",!0),s(this,"user",null),u(this,n,{writable:!0,value:void 0}),u(this,a,{writable:!0,value:void 0}),s(this,"onAccountsChanged",async t=>{t.length===0?await this.onDisconnect():this.emit("change",{account:y(t[0])})}),s(this,"onChainChanged",t=>{const i=E(t),h=this.options.chains.findIndex(l=>l.chainId===i)===-1;this.emit("change",{chain:{id:i,unsupported:h}})}),s(this,"onDisconnect",async()=>{this.emit("disconnect")}),this.options=e}getEmbeddedWalletSDK(){return r(this,n)||o(this,n,new p({clientId:this.options.clientId,chain:"Ethereum",onAuthSuccess:this.options.onAuthSuccess})),r(this,n)}async connect(e){if(e){if(!e.authResult)throw new Error("Missing authData - call authenticate() first with your authentication strategy");if(!e.authResult.user)throw new Error("Missing authData.user - call authenticate() first with your authentication strategy");this.user=e.authResult.user}else{const t=await this.authenticate({strategy:"iframe"});if(!t.user)throw new Error("Error connecting User");this.user=t.user}return e?.chainId&&this.switchChain(e.chainId),this.getAddress()}async disconnect(){await r(this,n)?.auth.logout(),o(this,a,void 0),o(this,n,void 0),this.user=null}async getAddress(){if(!this.user)throw new Error("Embedded Wallet is not connected");return await this.getSigner().then(e=>e.getAddress())}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async getProvider(){const e=await this.getSigner();if(!e.provider)throw new Error("Provider not found");return e.provider}async getSigner(){if(r(this,a))return r(this,a);const t=await(await this.getUser()).wallet.getEthersJsSigner({rpcEndpoint:this.options.chain.rpc[0]||""});if(!t)throw new Error("Signer not found");return o(this,a,t),t}async isAuthorized(){return!1}async switchChain(e){const t=this.options.chains.find(i=>i.chainId===e);if(!t)throw new Error("Chain not configured");try{await this.user?.wallet.setChain({chain:"Ethereum"}),o(this,a,await this.user?.wallet.getEthersJsSigner({rpcEndpoint:t.rpc[0]||""})),this.emit("change",{chain:{id:e,unsupported:!1}})}catch(i){console.warn("Failed to switch chain",i)}}async setupListeners(){return Promise.resolve()}updateChains(e){this.options.chains=e}async getUser(){if(!this.user||!this.user.wallet||!this.user.wallet.getEthersJsSigner){const t=await this.getEmbeddedWalletSDK().getUser();switch(t.status){case f.LOGGED_IN_WALLET_INITIALIZED:{this.user=t;break}default:throw new Error("Embedded Wallet is not authenticated, please authenticate first")}}return this.user}async getEmail(){return(await this.getUser()).authDetails.email}async getRecoveryInformation(){return(await this.getUser()).authDetails}async sendVerificationEmail(e){let{email:t}=e;return this.getEmbeddedWalletSDK().auth.sendEmailLoginOtp({email:t})}async authenticate(e){const t=this.getEmbeddedWalletSDK(),i=e.strategy;switch(i){case"email_verification":return await t.auth.verifyEmailLoginOtp({email:e.email,otp:e.verificationCode,recoveryCode:e.recoveryCode});case"apple":case"facebook":case"google":{const h=v[i];return t.auth.loginWithOauth({oauthProvider:h,closeOpenedWindow:e.closeOpenedWindow,openedWindow:e.openedWindow})}case"jwt":return t.auth.loginWithCustomJwt({jwt:e.jwt,encryptionKey:e.encryptionKey});case"auth_endpoint":return t.auth.loginWithCustomAuthEndpoint({payload:e.payload,encryptionKey:e.encryptionKey});case"iframe_email_verification":return t.auth.loginWithEmailOtp({email:e.email});case"iframe":return t.auth.loginWithModal();default:m(i)}}}function m(d){throw new Error("Invalid param: "+d)}const v={google:c.GOOGLE,facebook:c.FACEBOOK,apple:c.APPLE};export{I as EmbeddedWalletConnector};

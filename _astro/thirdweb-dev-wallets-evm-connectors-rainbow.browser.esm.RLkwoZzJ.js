import{_ as d,w as u,a as l,c as p,e as m,b as w,f as h,g as f,R as g,bI as I}from"./Login.VljSKXrW.js";import{InjectedConnector as C}from"./thirdweb-dev-wallets-evm-connectors-injected.browser.esm.JrVD5-xu.js";import"./jsx-runtime.7BJwlAz-.js";import"./index.9orYzNvn.js";import"./tokens.xyBxlAX2.js";import"./index.JdUBUp0J.js";import"./url-bc88b2b6.browser.esm.ca_vOvX1.js";var o=new WeakMap;class q extends C{constructor(e){const n={...{name:"Rainbow Wallet",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:I},...e.options};super({chains:e.chains,options:n,connectorStorage:e.connectorStorage}),d(this,"id",u.rainbow),l(this,o,{writable:!0,value:void 0}),p(this,o,n.UNSTABLE_shimOnConnectSelectAccount)}async connect(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const t=await this.getProvider();if(!t)throw new m;this.setupListeners(),this.emit("message",{type:"connecting"});let n=null;if(w(this,o)&&this.options?.shimDisconnect&&!this.connectorStorage.getItem(this.shimDisconnectKey)&&(n=await this.getAccount().catch(()=>null),!!n))try{await t.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(a){if(this.isUserRejectedRequestError(a))throw new h(a)}if(!n){const s=await t.request({method:"eth_requestAccounts"});n=f(s[0])}let i=await this.getChainId(),r=this.isChainUnsupported(i);if(e.chainId&&i!==e.chainId)try{await this.switchChain(e.chainId),i=e.chainId,r=this.isChainUnsupported(e.chainId)}catch(s){console.error(`Could not switch to chain id : ${e.chainId}`,s)}this.options?.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const c={chain:{id:i,unsupported:r},provider:t,account:n};return this.emit("connect",c),c}catch(t){throw this.isUserRejectedRequestError(t)?new h(t):t.code===-32002?new g(t):t}}}export{q as RainbowConnector};

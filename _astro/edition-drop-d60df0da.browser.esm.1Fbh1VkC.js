import{N as p,o as m,p as h,D as l,q as u,r as d,s as g,t as s,T as C,B as f}from"./Login.jzdBbfpg.js";import{C as w,a as y,b as W,G as T}from"./contract-appuri-a05d1c9a.browser.esm.9_ui4zcj.js";import{C as A}from"./contract-interceptor-d7b164a7.browser.esm.amNiAGmN.js";import{C as E,a as R}from"./contract-owner-87f50baf.browser.esm.sMWIeS40.js";import{C as k}from"./contract-platform-fee-dbafd1a2.browser.esm.ZTUZyebk.js";import{C as S}from"./contract-roles-37b20d5a.browser.esm.pHrxwvnF.js";import{C as b}from"./contract-sales-5eb82407.browser.esm.UNEee2P0.js";import{D as v}from"./erc-1155-ce97840a.browser.esm.T-plJbVO.js";import{S as N}from"./erc-1155-standard-33ebd1d0.browser.esm.X6qCyn1w.js";import{P as O}from"./thirdweb-checkout-817f51f0.browser.esm.-94jVCEi.js";import"./index.hfxd0CuE.js";import"./tokens.Ppa7r3iO.js";import"./setErc20Allowance-832742d0.browser.esm.tejeQ4xQ.js";import"./QueryParams-c7566bb2.browser.esm.T3gRdMo1.js";import"./index.Bt8VikPk.js";import"./assertEnabled-55070897.browser.esm.ZCyYilSz.js";class B{constructor(t){this.events=t}async getAllClaimerAddresses(t){const e=(await this.events.getEvents("TokensClaimed")).filter(r=>r.data&&f.isBigNumber(r.data.tokenId)?r.data.tokenId.eq(t):!1);return Array.from(new Set(e.filter(r=>typeof r.data?.claimer=="string").map(r=>r.data.claimer)))}}class o extends N{static contractRoles=p;constructor(t,e,r){let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,c=arguments.length>5?arguments[5]:void 0,i=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new m(t,e,n,a,r);super(i,r,c),this.abi=h.parse(n),this.metadata=new w(this.contractWrapper,l,this.storage),this.app=new y(this.contractWrapper,this.metadata,this.storage),this.roles=new S(this.contractWrapper,o.contractRoles),this.royalties=new E(this.contractWrapper,this.metadata),this.sales=new b(this.contractWrapper),this.claimConditions=new v(this.contractWrapper,this.metadata,this.storage),this.events=new W(this.contractWrapper),this.history=new B(this.events),this.encoder=new u(this.contractWrapper),this.estimator=new T(this.contractWrapper),this.platformFees=new k(this.contractWrapper),this.interceptor=new A(this.contractWrapper),this.checkout=new O(this.contractWrapper),this.owner=new R(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t,e){return this.erc1155.getOwned(t,e)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[d("transfer"),g])}createBatch=s(async(t,e)=>this.erc1155.lazyMint.prepare(t,e));async getClaimTransaction(t,e,r){let a=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return this.erc1155.getClaimTransaction(t,e,r,{checkERC20Allowance:a})}claimTo=s((()=>{var t=this;return async function(e,r,a){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return t.erc1155.claimTo.prepare(e,r,a,{checkERC20Allowance:n})}})());claim=s((()=>{var t=this;return async function(e,r){let a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const n=await t.contractWrapper.getSignerAddress();return t.claimTo.prepare(n,e,r,a)}})());burnTokens=s(async(t,e)=>this.erc1155.burn.prepare(t,e));async prepare(t,e,r){return C.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:e,overrides:r})}async call(t,e,r){return this.contractWrapper.call(t,e,r)}}export{o as EditionDrop};

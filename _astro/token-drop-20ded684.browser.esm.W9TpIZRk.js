import{bj as h,o as l,p as u,bk as g,q as d,J as s,r as f,s as C,t as e,T as c}from"./Login.jzdBbfpg.js";import{C as w,a as W,G as y,b as T}from"./contract-appuri-a05d1c9a.browser.esm.9_ui4zcj.js";import{C as R}from"./contract-interceptor-d7b164a7.browser.esm.amNiAGmN.js";import{C as b}from"./contract-platform-fee-dbafd1a2.browser.esm.ZTUZyebk.js";import{C as A}from"./contract-roles-37b20d5a.browser.esm.pHrxwvnF.js";import{C as E}from"./contract-sales-5eb82407.browser.esm.UNEee2P0.js";import{D as S}from"./drop-claim-conditions-b44061c8.browser.esm.hO1a_JoV.js";import{S as O}from"./erc-20-standard-151d82d7.browser.esm.Xsjv_QXy.js";import"./index.hfxd0CuE.js";import"./tokens.Ppa7r3iO.js";import"./index.Bt8VikPk.js";import"./assertEnabled-55070897.browser.esm.ZCyYilSz.js";import"./setErc20Allowance-832742d0.browser.esm.tejeQ4xQ.js";import"./erc-20-dccc5c20.browser.esm.mA9YL2hu.js";class i extends O{static contractRoles=h;constructor(t,r,a){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,p=arguments.length>5?arguments[5]:void 0,m=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new l(t,r,o,n,a);super(m,a,p),this.abi=u.parse(o||[]),this.metadata=new w(this.contractWrapper,g,this.storage),this.app=new W(this.contractWrapper,this.metadata,this.storage),this.roles=new A(this.contractWrapper,i.contractRoles),this.encoder=new d(this.contractWrapper),this.estimator=new y(this.contractWrapper),this.events=new T(this.contractWrapper),this.sales=new E(this.contractWrapper),this.platformFees=new b(this.contractWrapper),this.interceptor=new R(this.contractWrapper),this.claimConditions=new S(this.contractWrapper,this.metadata,this.storage)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.erc20.getValue(await this.contractWrapper.read("getVotes",[await s(t)]))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.read("delegates",[await s(t)])}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[f("transfer"),C])}claim=e((()=>{var t=this;return async function(r){let a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return t.claimTo.prepare(await t.contractWrapper.getSignerAddress(),r,a)}})());claimTo=e((()=>{var t=this;return async function(r,a){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return t.erc20.claimTo.prepare(r,a,{checkERC20Allowance:n})}})());delegateTo=e(async t=>c.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await s(t)]}));burnTokens=e(async t=>this.erc20.burn.prepare(t));burnFrom=e(async(t,r)=>this.erc20.burnFrom.prepare(t,r));async prepare(t,r,a){return c.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}}export{i as TokenDrop};

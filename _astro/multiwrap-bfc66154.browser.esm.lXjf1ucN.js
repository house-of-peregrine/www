import{a0 as l,o as k,p as w,a1 as g,q as A,I as f,J as W,t as d,G as h,T as c,H as C}from"./Login.FOoZKC81.js";import{h as T}from"./hasERC20Allowance-bbd79884.browser.esm.Fsmg7ODe.js";import{a as u}from"./marketplace-fbc507f1.browser.esm.QsF6NFph.js";import{u as v}from"./QueryParams-c7566bb2.browser.esm.w93UYVZa.js";import{C as y,a as I,G as E,b as R}from"./contract-appuri-a05d1c9a.browser.esm.HmjD5tla.js";import{C as $,a as b}from"./contract-owner-87f50baf.browser.esm.aTkBsPrq.js";import{C as S}from"./contract-roles-37b20d5a.browser.esm.XPdYvbeT.js";import{S as P}from"./erc-721-standard-5ffc7e16.browser.esm.uyP8q9s4.js";import"./jsx-runtime.7BJwlAz-.js";import"./index.9orYzNvn.js";import"./tokens.VZm6ve4Q.js";import"./index.JdUBUp0J.js";import"./setErc20Allowance-832742d0.browser.esm.cmmLqgE5.js";import"./index.K6drYFfb.js";import"./assertEnabled-55070897.browser.esm.pVBDq614.js";import"./erc-721-2c14d29e.browser.esm.vxx-oCT0.js";import"./drop-claim-conditions-b44061c8.browser.esm.tvR9Lu8Z.js";class m extends P{static contractRoles=l;constructor(r,e,n){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},t=arguments.length>4?arguments[4]:void 0,a=arguments.length>5?arguments[5]:void 0,s=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new k(r,e,t,o,n);super(s,n,a),this.abi=w.parse(t||[]),this.metadata=new y(this.contractWrapper,g,this.storage),this.app=new I(this.contractWrapper,this.metadata,this.storage),this.roles=new S(this.contractWrapper,m.contractRoles),this.encoder=new A(this.contractWrapper),this.estimator=new E(this.contractWrapper),this.events=new R(this.contractWrapper),this.royalties=new $(this.contractWrapper,this.metadata),this.owner=new b(this.contractWrapper)}async getWrappedContents(r){const e=await this.contractWrapper.read("getWrappedContents",[r]),n=[],o=[],t=[];for(const a of e)switch(a.tokenType){case 0:{const s=await f(this.contractWrapper.getProvider(),a.assetContract);n.push({contractAddress:a.assetContract,quantity:W(a.totalAmount,s.decimals)});break}case 1:{o.push({contractAddress:a.assetContract,tokenId:a.tokenId});break}case 2:{t.push({contractAddress:a.assetContract,tokenId:a.tokenId,quantity:a.totalAmount.toString()});break}}return{erc20Tokens:n,erc721Tokens:o,erc1155Tokens:t}}wrap=d(async(r,e,n)=>{const[o,t,a]=await Promise.all([v(e,this.storage),this.toTokenStructList(r),h(n||await this.contractWrapper.getSignerAddress())]);return c.fromContractWrapper({contractWrapper:this.contractWrapper,method:"wrap",args:[t,o,a],parse:s=>{const i=this.contractWrapper.parseLogs("TokensWrapped",s?.logs);if(i.length===0)throw new Error("TokensWrapped event not found");const p=i[0].args.tokenIdOfWrappedToken;return{id:p,receipt:s,data:()=>this.get(p)}}})});unwrap=d(async(r,e)=>{const n=await h(e||await this.contractWrapper.getSignerAddress());return c.fromContractWrapper({contractWrapper:this.contractWrapper,method:"unwrap",args:[r,n]})});async toTokenStructList(r){const e=[],n=this.contractWrapper.getProvider(),o=await this.contractWrapper.getSignerAddress();if(r.erc20Tokens)for(const t of r.erc20Tokens){const a=await C(n,t.quantity,t.contractAddress);if(!await T(this.contractWrapper,t.contractAddress,a))throw new Error(`ERC20 token with contract address "${t.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${t.contractAddress}").setAllowance("${this.getAddress()}", ${t.quantity});

`);e.push({assetContract:t.contractAddress,totalAmount:a,tokenId:0,tokenType:0})}if(r.erc721Tokens)for(const t of r.erc721Tokens){if(!await u(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,o))throw new Error(`ERC721 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${t.contractAddress}").setApprovalForToken("${this.getAddress()}", ${t.tokenId});

`);e.push({assetContract:t.contractAddress,totalAmount:0,tokenId:t.tokenId,tokenType:1})}if(r.erc1155Tokens)for(const t of r.erc1155Tokens){if(!await u(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,o))throw new Error(`ERC1155 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${t.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);e.push({assetContract:t.contractAddress,totalAmount:t.quantity,tokenId:t.tokenId,tokenType:2})}return e}async prepare(r,e,n){return c.fromContractWrapper({contractWrapper:this.contractWrapper,method:r,args:e,overrides:n})}async call(r,e,n){return this.contractWrapper.call(r,e,n)}}export{m as Multiwrap};

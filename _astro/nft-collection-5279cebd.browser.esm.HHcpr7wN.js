import{N as p,o as m,p as h,a2 as u,q as d,r as l,s as C,t as e,T as g}from"./Login.VljSKXrW.js";import{C as W,a as f,G as w,b as T}from"./contract-appuri-a05d1c9a.browser.esm.qjqvg_1Z.js";import{C as y}from"./contract-interceptor-d7b164a7.browser.esm.amNiAGmN.js";import{C as R,a as E}from"./contract-owner-87f50baf.browser.esm.9Ilm98j1.js";import{C as S}from"./contract-platform-fee-dbafd1a2.browser.esm.n39B2Yys.js";import{C as b}from"./contract-roles-37b20d5a.browser.esm.fsx3DRGP.js";import{C as A}from"./contract-sales-5eb82407.browser.esm.sf40rXs5.js";import{S as B}from"./erc-721-standard-5ffc7e16.browser.esm.ZHH99_kM.js";import{E as F}from"./erc-721-2c14d29e.browser.esm.eC66AcxM.js";import"./jsx-runtime.7BJwlAz-.js";import"./index.9orYzNvn.js";import"./tokens.xyBxlAX2.js";import"./index.JdUBUp0J.js";import"./setErc20Allowance-832742d0.browser.esm.oUZvzRI0.js";import"./QueryParams-c7566bb2.browser.esm.JB0fHRhb.js";import"./index.9Jh5xny-.js";import"./assertEnabled-55070897.browser.esm.SeC5mxnZ.js";import"./drop-claim-conditions-b44061c8.browser.esm.QqaKEqM2.js";class s extends B{static contractRoles=p;constructor(t,r,a){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,c=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new m(t,r,n,o,a);super(c,a,i),this.abi=h.parse(n||[]),this.metadata=new W(this.contractWrapper,u,this.storage),this.app=new f(this.contractWrapper,this.metadata,this.storage),this.roles=new b(this.contractWrapper,s.contractRoles),this.royalties=new R(this.contractWrapper,this.metadata),this.sales=new A(this.contractWrapper),this.encoder=new d(this.contractWrapper),this.estimator=new w(this.contractWrapper),this.events=new T(this.contractWrapper),this.platformFees=new S(this.contractWrapper),this.interceptor=new y(this.contractWrapper),this.signature=new F(this.contractWrapper,this.storage),this.owner=new E(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[l("transfer"),C])}mint=e(async t=>this.erc721.mint.prepare(t));mintTo=e(async(t,r)=>this.erc721.mintTo.prepare(t,r));async getMintTransaction(t,r){return this.erc721.getMintTransaction(t,r)}mintBatch=e(async t=>this.erc721.mintBatch.prepare(t));mintBatchTo=e(async(t,r)=>this.erc721.mintBatchTo.prepare(t,r));burn=e(t=>this.erc721.burn.prepare(t));async prepare(t,r,a){return g.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}}export{s as NFTCollection};

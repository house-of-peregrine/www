import{ai as C,p as w,aj as W,ak as A,t as m,T as E,al as k,am as v,an as N,J as L,ao as M,ap as U}from"./Login.VljSKXrW.js";function f(p,t){return C(w.parse(p.abi),t)}function y(p,t){return p in t.readContract.functions}class T{featureName=W.name;constructor(t,r,e){this.contractWrapper=t,this.schema=r,this.storage=e}parseOutputMetadata(t){return this.schema.output.parseAsync(t)}parseInputMetadata(t){return this.schema.input.parseAsync(t)}async get(){let t;if(this.supportsContractMetadata(this.contractWrapper)){const r=await this.contractWrapper.read("contractURI",[]);r&&r.includes("://")&&(t=await this.storage.downloadJSON(r))}if(!t)try{let r;try{y("name",this.contractWrapper)&&(r=await this.contractWrapper.read("name",[]))}catch{}let e;try{y("symbol",this.contractWrapper)&&(e=await this.contractWrapper.read("symbol",[]))}catch{}let a;try{a=await A(this.contractWrapper.address,this.contractWrapper.getProvider(),this.storage,this.contractWrapper.options)}catch{}t={name:r||a?.name,symbol:e,description:a?.info.title}}catch{throw new Error("Could not fetch contract metadata")}return this.parseOutputMetadata(t)}set=m(async t=>{const r=await this._parseAndUploadMetadata(t),e=this.contractWrapper;if(this.supportsContractMetadata(e))return E.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setContractURI",args:[r],parse:a=>({receipt:a,data:this.get})});throw new k(W)});update=m(async t=>await this.set.prepare({...await this.get(),...t}));async _parseAndUploadMetadata(t){const r=await this.parseInputMetadata(t);return this.storage.upload(r)}supportsContractMetadata(t){return f(t,"ContractMetadata")}}class I{constructor(t){this.contractWrapper=t}addTransactionListener(t){this.contractWrapper.addListener(v.Transaction,t)}removeTransactionListener(t){this.contractWrapper.off(v.Transaction,t)}addEventListener(t,r){const e=this.contractWrapper.readContract.interface.getEvent(t),s={address:this.contractWrapper.address,topics:[this.contractWrapper.readContract.interface.getEventTopic(e)]},n=o=>{const c=this.contractWrapper.readContract.interface.parseLog(o);r(this.toContractEvent(c.eventFragment,c.args,o))};return this.contractWrapper.getProvider().on(s,n),()=>{this.contractWrapper.getProvider().off(s,n)}}listenToAllEvents(t){const e={address:this.contractWrapper.address},a=s=>{try{const n=this.contractWrapper.readContract.interface.parseLog(s);t(this.toContractEvent(n.eventFragment,n.args,s))}catch(n){console.error("Could not parse event:",s,n)}};return this.contractWrapper.getProvider().on(e,a),()=>{this.contractWrapper.getProvider().off(e,a)}}removeEventListener(t,r){const e=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.off(e.name,r)}removeAllListeners(){this.contractWrapper.readContract.removeAllListeners();const r={address:this.contractWrapper.address};this.contractWrapper.getProvider().removeAllListeners(r)}async getAllEvents(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{fromBlock:0,toBlock:"latest",order:"desc"};const e=(await this.contractWrapper.readContract.queryFilter({},t.fromBlock,t.toBlock)).sort((a,s)=>t.order==="desc"?s.blockNumber-a.blockNumber:a.blockNumber-s.blockNumber);return this.parseEvents(e)}async getEvents(t){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{fromBlock:0,toBlock:"latest",order:"desc"};const e=this.contractWrapper.readContract.interface.getEvent(t),a=r.filters?e.inputs.map(c=>r.filters[c.name]):[],s=this.contractWrapper.readContract.filters[e.name](...a),o=(await this.contractWrapper.readContract.queryFilter(s,r.fromBlock,r.toBlock)).sort((c,d)=>r.order==="desc"?d.blockNumber-c.blockNumber:c.blockNumber-d.blockNumber);return this.parseEvents(o)}parseEvents(t){return t.map(r=>{const e=Object.fromEntries(Object.entries(r).filter(a=>typeof a[1]!="function"&&a[0]!=="args"));if(r.args){const a=Object.entries(r.args),s=a.slice(a.length/2,a.length),n={};for(const[o,c]of s)n[o]=c;return{eventName:r.event||"",data:n,transaction:e}}return{eventName:r.event||"",data:{},transaction:e}})}toContractEvent(t,r,e){const a=Object.fromEntries(Object.entries(e).filter(n=>typeof n[1]!="function"&&n[0]!=="args")),s={};return t.inputs.forEach((n,o)=>{if(Array.isArray(r[o])){const c=n.components;if(c){const d=r[o];if(n.type==="tuple[]"){const h=[];for(let i=0;i<d.length;i++){const l=d[i],g={};for(let u=0;u<c.length;u++){const b=c[u].name;g[b]=l[u]}h.push(g)}s[n.name]=h}else{const h={};for(let i=0;i<c.length;i++){const l=c[i].name;h[l]=d[i]}s[n.name]=h}}}else s[n.name]=r[o]}),{eventName:t.name,data:s,transaction:a}}}class j{constructor(t){this.contractWrapper=t}async gasCostOf(t,r){const[e,a]=await Promise.all([this.contractWrapper.getProvider().getGasPrice(),this.contractWrapper.estimateGas(t,r)]);return N(a.mul(e))}async gasLimitOf(t,r){return this.contractWrapper.estimateGas(t,r)}async currentGasPriceInGwei(){const t=await this.contractWrapper.getProvider().getGasPrice();return L(t,"gwei")}}class F{featureName=M.name;constructor(t,r,e){this.contractWrapper=t,this.metadata=r,this.storage=e}async get(){return f(this.contractWrapper,"AppURI")?await this.contractWrapper.read("appURI",[]):U((await this.metadata.get()).app_uri||"",this.storage.getGatewayUrls())}set=m(async t=>f(this.contractWrapper,"AppURI")?E.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAppURI",args:[t]}):await this.metadata.update.prepare({app_uri:t}))}export{T as C,j as G,F as a,I as b,f as d,y as h};

import{F as G,q as O,B as s,J as h,t as p,K as A,T as u,ai as y,aN as w,m as T,ad as P,v as j,s as x,H,I as K,aP as I,x as Z,aE as D,aQ as M,o as J,ax as b,aG as C,aR as g,ae as F,aH as B}from"./Login.kXXM0ZeX.js";import{c as N}from"./cleanCurrencyAddress-f70c3199.browser.esm.r3XpwnlE.js";import{s as _}from"./setErc20Allowance-832742d0.browser.esm.5FZ1S9fi.js";import{g as v,h as L,i as Q}from"./marketplace-fbc507f1.browser.esm.vK719qFz.js";import{f as R,I as X,c as Y}from"./QueryParams-c7566bb2.browser.esm.6S__dBaR.js";import{R as z,E as V}from"./assertEnabled-55070897.browser.esm.GpoZczbg.js";import{b as S,G as $}from"./contract-appuri-a05d1c9a.browser.esm.Klf82i5D.js";import{C as q}from"./contract-interceptor-d7b164a7.browser.esm.amNiAGmN.js";const U=b.object({assetContractAddress:C,tokenId:g,quantity:g.default(1),currencyContractAddress:C.default(F),pricePerToken:B,startTimestamp:z.default(new Date),endTimestamp:V,isReservedListing:b.boolean().default(!1)});let m=function(l){return l[l.UNSET=0]="UNSET",l[l.Created=1]="Created",l[l.Completed=2]="Completed",l[l.Cancelled=3]="Cancelled",l[l.Active=4]="Active",l[l.Expired=5]="Expired",l}({});class pt{featureName=G.name;constructor(t,r){this.contractWrapper=t,this.storage=r,this.events=new S(this.contractWrapper),this.encoder=new O(this.contractWrapper),this.interceptor=new q(this.contractWrapper),this.estimator=new $(this.contractWrapper)}getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalListings",[])}async getAll(t){const r=await this.getTotalCount(),e=s.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No listings exist on the contract.");let n=[];n=(await v(e,a,(o,d)=>this.contractWrapper.read("getAllListings",[o,d]))).flat();const c=await this.applyFilter(n,t);return await Promise.all(c.map(o=>this.mapListing(o)))}async getAllValid(t){const r=await this.getTotalCount(),e=s.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No listings exist on the contract.");let n=[];n=(await v(e,a,(o,d)=>this.contractWrapper.read("getAllValidListings",[o,d]))).flat();const c=await this.applyFilter(n,t);return await Promise.all(c.map(o=>this.mapListing(o)))}async getListing(t){const r=await this.contractWrapper.read("getListing",[t]);return await this.mapListing(r)}async isBuyerApprovedForListing(t,r){if(!(await this.validateListing(s.from(t))).isReservedListing)throw new Error(`Listing ${t} is not a reserved listing.`);return await this.contractWrapper.read("isBuyerApprovedForListing",[t,await h(r)])}async isCurrencyApprovedForListing(t,r){return await this.validateListing(s.from(t)),await this.contractWrapper.read("isCurrencyApprovedForListing",[t,await h(r)])}async currencyPriceForListing(t,r){const e=await this.validateListing(s.from(t)),a=await h(r);if(a===e.currencyContractAddress)return e.pricePerToken;if(!await this.isCurrencyApprovedForListing(t,a))throw new Error(`Currency ${a} is not approved for Listing ${t}.`);return await this.contractWrapper.read("currencyPriceForListing",[t,a])}createListing=p(async t=>{const r=await U.parseAsync(t);await L(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());const e=await A(this.contractWrapper.getProvider(),r.pricePerToken,r.currencyContractAddress),n=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;return r.startTimestamp.lt(n)&&(r.startTimestamp=s.from(n)),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:N(r.currencyContractAddress),pricePerToken:e,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp,reserved:r.isReservedListing}],parse:i=>({id:this.contractWrapper.parseLogs("NewListing",i?.logs)[0].args.listingId,receipt:i})})});createListingsBatch=p(async t=>{const r=(await Promise.all(t.map(e=>this.createListing.prepare(e)))).map(e=>e.encode());return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:e=>this.contractWrapper.parseLogs("NewListing",e?.logs).map(n=>({id:n.args.listingId,receipt:e}))})});updateListing=p(async(t,r)=>{const e=await U.parseAsync(r);await L(this.contractWrapper,this.getAddress(),e.assetContractAddress,e.tokenId,await this.contractWrapper.getSignerAddress());const a=await A(this.contractWrapper.getProvider(),e.pricePerToken,e.currencyContractAddress);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t,{assetContract:e.assetContractAddress,tokenId:e.tokenId,quantity:e.quantity,currency:N(e.currencyContractAddress),pricePerToken:a,startTimestamp:e.startTimestamp,endTimestamp:e.endTimestamp,reserved:e.isReservedListing}],parse:n=>({id:this.contractWrapper.parseLogs("UpdatedListing",n?.logs)[0].args.listingId,receipt:n})})});cancelListing=p(async t=>u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelListing",args:[t]}));buyFromListing=p(async(t,r,e)=>{e&&(e=await h(e));const a=await this.validateListing(s.from(t)),{valid:n,error:i}=await this.isStillValidListing(a,r);if(!n)throw new Error(`Listing ${t} is no longer valid. ${i}`);const c=e||await this.contractWrapper.getSignerAddress(),o=s.from(r),d=s.from(a.pricePerToken).mul(o),f=await this.contractWrapper.getCallOverrides()||{};return await _(this.contractWrapper,d,a.currencyContractAddress,f),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"buyFromListing",args:[t,c,o,a.currencyContractAddress,d],overrides:f})});approveBuyerForReservedListing=p(async(t,r)=>{if(await this.isBuyerApprovedForListing(t,r))throw new Error(`Buyer ${r} already approved for listing ${t}.`);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveBuyerForListing",args:[t,r,!0]})});revokeBuyerApprovalForReservedListing=p(async(t,r)=>{if(await this.isBuyerApprovedForListing(t,r))return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveBuyerForListing",args:[t,r,!1]});throw new Error(`Buyer ${r} not approved for listing ${t}.`)});approveCurrencyForListing=p(async(t,r,e)=>{const a=await this.validateListing(s.from(t)),n=await h(r);n===a.currencyContractAddress&&y(e===a.pricePerToken);const i=await this.contractWrapper.read("currencyPriceForListing",[t,n]);return y(e===i),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveCurrencyForListing",args:[t,n,e]})});revokeCurrencyApprovalForListing=p(async(t,r)=>{const e=await this.validateListing(s.from(t)),a=await h(r);if(a===e.currencyContractAddress)throw new Error("Can't revoke approval for main listing currency.");const n=await this.contractWrapper.read("currencyPriceForListing",[t,a]);return y(!n.isZero()),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveCurrencyForListing",args:[t,a,s.from(0)]})});async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error(`Error getting the listing with id ${t}`),r}}async mapListing(t){let r=m.UNSET;const a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=s.from(t.startTimestamp).gt(a)?m.Created:s.from(t.endTimestamp).lt(a)?m.Expired:m.Active;break;case 2:r=m.Completed;break;case 3:r=m.Cancelled;break}return{assetContractAddress:t.assetContract,currencyContractAddress:t.currency,pricePerToken:t.pricePerToken.toString(),currencyValuePerToken:await w(this.contractWrapper.getProvider(),t.currency,t.pricePerToken),id:t.listingId.toString(),tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),startTimeInSeconds:s.from(t.startTimestamp).toNumber(),asset:await R(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:s.from(t.endTimestamp).toNumber(),creatorAddress:t.listingCreator,isReservedListing:t.reserved,status:r}}async isStillValidListing(t,r){if(!await Q(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.creatorAddress))return{valid:!1,error:`Token '${t.tokenId}' from contract '${t.assetContractAddress}' is not approved for transfer`};const a=this.contractWrapper.getProvider(),n=(await T(()=>import("./IERC165.rumQzOOh.js"),__vite__mapDeps([]))).default,i=new P(t.assetContractAddress,n,a),c=await i.supportsInterface(X),o=await i.supportsInterface(Y);if(c){const d=(await T(()=>import("./Login.kXXM0ZeX.js").then(k=>k.dk),__vite__mapDeps([0,1,2]))).default,f=new P(t.assetContractAddress,d,a);let E;try{E=await f.ownerOf(t.tokenId)}catch{}const W=E?.toLowerCase()===t.creatorAddress.toLowerCase();return{valid:W,error:W?void 0:`Seller is not the owner of Token '${t.tokenId}' from contract '${t.assetContractAddress} anymore'`}}else if(o){const d=(await T(()=>import("./Login.kXXM0ZeX.js").then(k=>k.dm),__vite__mapDeps([0,1,2]))).default,W=(await new P(t.assetContractAddress,d,a).balanceOf(t.creatorAddress,t.tokenId)).gte(r||t.quantity);return{valid:W,error:W?void 0:`Seller does not have enough balance of Token '${t.tokenId}' from contract '${t.assetContractAddress} to fulfill the listing`}}else return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."}}async applyFilter(t,r){let e=[...t];if(r){if(r.seller){const a=await h(r.seller);e=e.filter(n=>n.listingCreator.toString().toLowerCase()===a?.toString().toLowerCase())}if(r.tokenContract){const a=await h(r.tokenContract);e=e.filter(n=>n.assetContract.toString().toLowerCase()===a?.toString().toLowerCase())}r.tokenId!==void 0&&(e=e.filter(a=>a.tokenId.toString()===r?.tokenId?.toString()))}return r?.count&&r.count<e.length?e.slice(0,r.count):e}}const tt=b.object({assetContractAddress:C,tokenId:g,quantity:g.default(1),currencyContractAddress:C.default(F),minimumBidAmount:B,buyoutBidAmount:B,timeBufferInSeconds:g.default(900),bidBufferBps:g.default(500),startTimestamp:z.default(new Date),endTimestamp:V});class ut{featureName=j.name;constructor(t,r){this.contractWrapper=t,this.storage=r,this.events=new S(this.contractWrapper),this.encoder=new O(this.contractWrapper),this.interceptor=new q(this.contractWrapper),this.estimator=new $(this.contractWrapper)}getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalAuctions",[])}async getAll(t){const r=await this.getTotalCount(),e=s.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No auctions exist on the contract.");let n=[];n=(await v(e,a,(o,d)=>this.contractWrapper.read("getAllAuctions",[o,d]))).flat();const c=await this.applyFilter(n,t);return await Promise.all(c.map(o=>this.mapAuction(o)))}async getAllValid(t){const r=await this.getTotalCount(),e=s.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No auctions exist on the contract.");let n=[];n=(await v(e,a,(o,d)=>this.contractWrapper.read("getAllValidAuctions",[o,d]))).flat();const c=await this.applyFilter(n,t);return await Promise.all(c.map(o=>this.mapAuction(o)))}async getAuction(t){const r=await this.contractWrapper.read("getAuction",[t]);return await this.mapAuction(r)}async getWinningBid(t){await this.validateAuction(s.from(t));const r=await this.contractWrapper.read("getWinningBid",[t]);if(r._bidder!==x)return await this.mapBid(t.toString(),r._bidder,r._currency,r._bidAmount.toString())}async isWinningBid(t,r){return await this.contractWrapper.read("isNewWinningBid",[t,r])}async getWinner(t){const r=await this.validateAuction(s.from(t)),e=await this.contractWrapper.read("getWinningBid",[t]),a=s.from(Math.floor(Date.now()/1e3)),n=s.from(r.endTimeInSeconds);if(a.gt(n)&&e._bidder!==x)return e._bidder;const o=(await new S(this.contractWrapper).getEvents("AuctionClosed")).find(d=>d.data.auctionId.eq(s.from(t)));if(!o)throw new Error(`Could not find auction with ID ${t} in closed auctions`);return o.data.winningBidder}createAuction=p(async t=>{const r=tt.parse(t);await L(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());const e=await A(this.contractWrapper.getProvider(),r.buyoutBidAmount,r.currencyContractAddress),a=await A(this.contractWrapper.getProvider(),r.minimumBidAmount,r.currencyContractAddress),i=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;return r.startTimestamp.lt(i)&&(r.startTimestamp=s.from(i)),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createAuction",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:N(r.currencyContractAddress),minimumBidAmount:a,buyoutBidAmount:e,timeBufferInSeconds:r.timeBufferInSeconds,bidBufferBps:r.bidBufferBps,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp}],parse:c=>({id:this.contractWrapper.parseLogs("NewAuction",c.logs)[0].args.auctionId,receipt:c})})});createAuctionsBatch=p(async t=>{const r=(await Promise.all(t.map(e=>this.createAuction.prepare(e)))).map(e=>e.encode());return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:e=>this.contractWrapper.parseLogs("NewAuction",e?.logs).map(n=>({id:n.args.auctionId,receipt:e}))})});buyoutAuction=p(async t=>{const r=await this.validateAuction(s.from(t)),e=await H(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid.prepare(t,K(r.buyoutBidAmount,e.decimals))});makeBid=p(async(t,r)=>{const e=await this.validateAuction(s.from(t)),a=await A(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(a.eq(s.from(0)))throw new Error("Cannot make a bid with 0 value");if(s.from(e.buyoutBidAmount).gt(0)&&a.gt(e.buyoutBidAmount))throw new Error("Bid amount must be less than or equal to buyoutBidAmount");if(await this.getWinningBid(t)){const c=await this.isWinningBid(t,a);y(c)}else{const c=a,o=s.from(e.minimumBidAmount);y(c.gte(o))}const i=await this.contractWrapper.getCallOverrides()||{};return await _(this.contractWrapper,a,e.currencyContractAddress,i),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"bidInAuction",args:[t,a],overrides:i})});cancelAuction=p(async t=>{if(await this.getWinningBid(t))throw new Error("Bids already made.");return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelAuction",args:[t]})});closeAuctionForBidder=p(async(t,r)=>{r||(r=await this.contractWrapper.getSignerAddress());const e=await this.validateAuction(s.from(t));try{return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"collectAuctionTokens",args:[s.from(t)]})}catch(a){throw a.message.includes("Marketplace: auction still active.")?new I(t.toString(),e.endTimeInSeconds.toString()):a}});closeAuctionForSeller=p(async t=>{const r=await this.validateAuction(s.from(t));try{return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"collectAuctionPayout",args:[s.from(t)]})}catch(e){throw e.message.includes("Marketplace: auction still active.")?new I(t.toString(),r.endTimeInSeconds.toString()):e}});executeSale=p(async t=>{const r=await this.validateAuction(s.from(t));try{const e=await this.getWinningBid(t);y(e,"No winning bid found");const a=this.encoder.encode("collectAuctionPayout",[t]),n=this.encoder.encode("collectAuctionTokens",[t]);return u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[[a,n]]})}catch(e){throw e.message.includes("Marketplace: auction still active.")?new I(t.toString(),r.endTimeInSeconds.toString()):e}});async getBidBufferBps(t){return(await this.getAuction(t)).bidBufferBps}async getMinimumNextBid(t){const[r,e,a]=await Promise.all([this.getBidBufferBps(t),this.getWinningBid(t),this.validateAuction(s.from(t))]),n=e?s.from(e.bidAmount):s.from(a.minimumBidAmount),i=n.add(n.mul(r).div(1e4));return w(this.contractWrapper.getProvider(),a.currencyContractAddress,i)}async validateAuction(t){try{return await this.getAuction(t)}catch(r){throw console.error(`Error getting the auction with id ${t}`),r}}async mapAuction(t){let r=m.UNSET;const a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=s.from(t.startTimestamp).gt(a)?m.Created:s.from(t.endTimestamp).lt(a)?m.Expired:m.Active;break;case 2:r=m.Completed;break;case 3:r=m.Cancelled;break}return{id:t.auctionId.toString(),creatorAddress:t.auctionCreator,assetContractAddress:t.assetContract,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),currencyContractAddress:t.currency,minimumBidAmount:t.minimumBidAmount.toString(),minimumBidCurrencyValue:await w(this.contractWrapper.getProvider(),t.currency,t.minimumBidAmount),buyoutBidAmount:t.buyoutBidAmount.toString(),buyoutCurrencyValue:await w(this.contractWrapper.getProvider(),t.currency,t.buyoutBidAmount),timeBufferInSeconds:s.from(t.timeBufferInSeconds).toNumber(),bidBufferBps:s.from(t.bidBufferBps).toNumber(),startTimeInSeconds:s.from(t.startTimestamp).toNumber(),endTimeInSeconds:s.from(t.endTimestamp).toNumber(),asset:await R(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),status:r}}async mapBid(t,r,e,a){const n=await h(r),i=await h(e);return{auctionId:t,bidderAddress:n,currencyContractAddress:i,bidAmount:a,bidAmountCurrencyValue:await w(this.contractWrapper.getProvider(),i,a)}}async applyFilter(t,r){let e=[...t];if(r){if(r.seller){const a=await h(r.seller);e=e.filter(n=>n.auctionCreator.toString().toLowerCase()===a?.toString().toLowerCase())}if(r.tokenContract){const a=await h(r.tokenContract);e=e.filter(n=>n.assetContract.toString().toLowerCase()===a?.toString().toLowerCase())}r.tokenId!==void 0&&(e=e.filter(a=>a.tokenId.toString()===r?.tokenId?.toString()))}return r?.count&&r.count<e.length?e.slice(0,r.count):e}}const rt=b.object({assetContractAddress:C,tokenId:g,quantity:g.default(1),currencyContractAddress:C.default(F),totalPrice:B,endTimestamp:V});class mt{featureName=Z.name;constructor(t,r){this.contractWrapper=t,this.storage=r,this.events=new S(this.contractWrapper),this.encoder=new O(this.contractWrapper),this.interceptor=new q(this.contractWrapper),this.estimator=new $(this.contractWrapper)}getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalOffers",[])}async getAll(t){const r=await this.getTotalCount(),e=s.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No offers exist on the contract.");let n=[];n=(await v(e,a,(o,d)=>this.contractWrapper.read("getAllOffers",[o,d]))).flat();const c=await this.applyFilter(n,t);return await Promise.all(c.map(o=>this.mapOffer(o)))}async getAllValid(t){const r=await this.getTotalCount(),e=s.from(t?.start||0).toNumber(),a=r.toNumber();if(a===0)throw new Error("No offers exist on the contract.");let n=[];n=(await v(e,a,(o,d)=>this.contractWrapper.read("getAllValidOffers",[o,d]))).flat();const c=await this.applyFilter(n,t);return await Promise.all(c.map(o=>this.mapOffer(o)))}async getOffer(t){const r=await this.contractWrapper.read("getOffer",[t]);return await this.mapOffer(r)}makeOffer=p(async t=>{const r=await rt.parseAsync(t),e=await this.contractWrapper.getChainID(),a=D(r.currencyContractAddress)?M[e].wrapped.address:r.currencyContractAddress,n=await A(this.contractWrapper.getProvider(),r.totalPrice,a),i=await this.contractWrapper.getCallOverrides();return await _(this.contractWrapper,n,a,i),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"makeOffer",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:a,totalPrice:n,expirationTimestamp:r.endTimestamp}],parse:c=>({id:this.contractWrapper.parseLogs("NewOffer",c?.logs)[0].args.offerId,receipt:c})})});cancelOffer=p(async t=>u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelOffer",args:[t]}));acceptOffer=p(async t=>{const r=await this.validateOffer(s.from(t)),{valid:e,error:a}=await this.isStillValidOffer(r);if(!e)throw new Error(`Offer ${t} is no longer valid. ${a}`);const n=await this.contractWrapper.getCallOverrides()||{};return await L(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress()),u.fromContractWrapper({contractWrapper:this.contractWrapper,method:"acceptOffer",args:[t],overrides:n})});async validateOffer(t){try{return await this.getOffer(t)}catch(r){throw console.error(`Error getting the offer with id ${t}`),r}}async mapOffer(t){let r=m.UNSET;const a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=s.from(t.expirationTimestamp).lt(a)?m.Expired:m.Active;break;case 2:r=m.Completed;break;case 3:r=m.Cancelled;break}return{id:t.offerId.toString(),offerorAddress:t.offeror,assetContractAddress:t.assetContract,currencyContractAddress:t.currency,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),totalPrice:t.totalPrice.toString(),currencyValue:await w(this.contractWrapper.getProvider(),t.currency,t.totalPrice),asset:await R(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:s.from(t.expirationTimestamp).toNumber(),status:r}}async isStillValidOffer(t){if(s.from(Math.floor(Date.now()/1e3)).gt(t.endTimeInSeconds))return{valid:!1,error:`Offer with ID ${t.id} has expired`};const e=await this.contractWrapper.getChainID(),a=D(t.currencyContractAddress)?M[e].wrapped.address:t.currencyContractAddress,n=this.contractWrapper.getProvider(),i=(await T(()=>import("./Login.kXXM0ZeX.js").then(f=>f.dj),__vite__mapDeps([0,1,2]))).default,c=new J(n,a,i,{},this.storage);return(await c.read("balanceOf",[t.offerorAddress])).lt(t.totalPrice)?{valid:!1,error:`Offeror ${t.offerorAddress} doesn't have enough balance of token ${a}`}:(await c.read("allowance",[t.offerorAddress,this.getAddress()])).lt(t.totalPrice)?{valid:!1,error:`Offeror ${t.offerorAddress} hasn't approved enough amount of token ${a}`}:{valid:!0,error:""}}async applyFilter(t,r){let e=[...t];if(r){if(r.offeror){const a=await h(r.offeror);e=e.filter(n=>n.offeror.toString().toLowerCase()===a?.toString().toLowerCase())}if(r.tokenContract){const a=await h(r.tokenContract);e=e.filter(n=>n.assetContract.toString().toLowerCase()===a?.toString().toLowerCase())}r.tokenId!==void 0&&(e=e.filter(a=>a.tokenId.toString()===r?.tokenId?.toString()))}return r?.count&&r.count<e.length?e.slice(0,r.count):e}}export{pt as M,ut as a,mt as b};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["_astro/Login.kXXM0ZeX.js","_astro/index.hfxd0CuE.js","_astro/tokens.xGG2VBAi.js"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}

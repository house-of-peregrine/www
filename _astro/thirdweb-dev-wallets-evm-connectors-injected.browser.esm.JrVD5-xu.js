import{W as g,a as w,_ as h,g as d,n as m,e as c,f as u,R as p,c as C,b as y,k as v,l as I,ae as P,af as E,S as W,ag as A}from"./Login.VljSKXrW.js";import{g as S}from"./url-bc88b2b6.browser.esm.ca_vOvX1.js";import"./jsx-runtime.7BJwlAz-.js";import"./index.9orYzNvn.js";import"./tokens.xyBxlAX2.js";import"./index.JdUBUp0J.js";function U(o){if(!o)return"Injected";const e=t=>{if(t.isAvalanche)return"Core Wallet";if(t.isBitKeep)return"BitKeep";if(t.isBraveWallet)return"Brave Wallet";if(t.isCoinbaseWallet)return"Coinbase Wallet";if(t.isExodus)return"Exodus";if(t.isFrame)return"Frame";if(t.isKuCoinWallet)return"KuCoin Wallet";if(t.isMathWallet)return"MathWallet";if(t.isOneInchIOSWallet||t.isOneInchAndroidWallet)return"1inch Wallet";if(t.isOpera)return"Opera";if(t.isPortal)return"Ripio Portal";if(t.isTally)return"Tally";if(t.isTokenPocket)return"TokenPocket";if(t.isTokenary)return"Tokenary";if(t.isTrust||t.isTrustWallet)return"Trust Wallet";if(t.isMetaMask)return"MetaMask"};if(o.providers?.length){const t=new Set;let s=1;for(const n of o.providers){let r=e(n);r||(r=`Unknown Wallet #${s}`,s+=1),t.add(r)}const i=[...t];return i.length?i:i[0]??"Injected"}return e(o)??"Injected"}var l=new WeakMap;class b extends g{constructor(e){const s={...{shimDisconnect:!0,getProvider:()=>{if(A(globalThis.window))return globalThis.window.ethereum}},...e.options};super({chains:e.chains,options:s}),w(this,l,{writable:!0,value:void 0}),h(this,"shimDisconnectKey","injected.shimDisconnect"),h(this,"onAccountsChanged",async n=>{n.length===0?this.emit("disconnect"):this.emit("change",{account:d(n[0])})}),h(this,"onChainChanged",n=>{const r=m(n),a=this.isChainUnsupported(r);this.emit("change",{chain:{id:r,unsupported:a}})}),h(this,"onDisconnect",async n=>{if(n.code===1013&&await this.getProvider())try{if(await this.getAccount())return}catch{}this.emit("disconnect"),this.options.shimDisconnect&&await this.connectorStorage.removeItem(this.shimDisconnectKey)});const i=s.getProvider();if(typeof s.name=="string")this.name=s.name;else if(i){const n=U(i);s.name?this.name=s.name(n):typeof n=="string"?this.name=n:this.name=n[0]}else this.name="Injected";this.id="injected",this.ready=!!i,this.connectorStorage=e.connectorStorage}async connect(){let e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const t=await this.getProvider();if(!t)throw new c;this.setupListeners(),this.emit("message",{type:"connecting"});const s=await t.request({method:"eth_requestAccounts"}),i=d(s[0]);let n=await this.getChainId(),r=this.isChainUnsupported(n);if(e.chainId&&n!==e.chainId)try{await this.switchChain(e.chainId),n=e.chainId,r=this.isChainUnsupported(e.chainId)}catch(f){console.error(`Could not switch to chain id: ${e.chainId}`,f)}this.options.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const a={account:i,chain:{id:n,unsupported:r},provider:t};return this.emit("connect",a),a}catch(t){throw this.isUserRejectedRequestError(t)?new u(t):t.code===-32002?new p(t):t}}async disconnect(){const e=await this.getProvider();e?.removeListener&&(e.removeListener("accountsChanged",this.onAccountsChanged),e.removeListener("chainChanged",this.onChainChanged),e.removeListener("disconnect",this.onDisconnect),this.options.shimDisconnect&&await this.connectorStorage.removeItem(this.shimDisconnectKey))}async getAccount(){const e=await this.getProvider();if(!e)throw new c;const t=await e.request({method:"eth_accounts"});return d(t[0])}async getChainId(){const e=await this.getProvider();if(!e)throw new c;return e.request({method:"eth_chainId"}).then(m)}async getProvider(){const e=this.options.getProvider();return e&&C(this,l,e),y(this,l)}async getSigner(){let{chainId:e}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[t,s]=await Promise.all([this.getProvider(),this.getAccount()]);return new v(t,e).getSigner(s)}async isAuthorized(){try{if(this.options.shimDisconnect&&!await this.connectorStorage.getItem(this.shimDisconnectKey))return!1;if(!await this.getProvider())throw new c;return!!await this.getAccount()}catch{return!1}}async switchChain(e){const t=await this.getProvider();if(!t)throw new c;const s=I(e);try{await t.request({method:"wallet_switchEthereumChain",params:[{chainId:s}]});const i=this.chains.find(n=>n.chainId===e);return i||{chainId:e,name:`Chain ${s}`,slug:`${s}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],chain:"",shortName:"",testnet:!0}}catch(i){const n=this.chains.find(r=>r.chainId===e);if(!n)throw new P({chainId:e,connectorId:this.id});if(i.code===4902||i?.data?.originalError?.code===4902)try{return await t.request({method:"wallet_addEthereumChain",params:[{chainId:s,chainName:n.name,nativeCurrency:n.nativeCurrency,rpcUrls:S(n),blockExplorerUrls:this.getBlockExplorerUrls(n)}]}),n}catch(r){throw this.isUserRejectedRequestError(r)?new u(i):new E}throw this.isUserRejectedRequestError(i)?new u(i):new W(i)}}async setupListeners(){const e=await this.getProvider();e.on&&(e.on("accountsChanged",this.onAccountsChanged),e.on("chainChanged",this.onChainChanged),e.on("disconnect",this.onDisconnect))}isUserRejectedRequestError(e){return e.code===4001}}export{b as InjectedConnector};

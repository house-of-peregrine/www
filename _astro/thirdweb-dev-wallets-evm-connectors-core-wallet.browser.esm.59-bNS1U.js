import{_ as h,w as d,e as u,f as a,g as l,R as p,br as m}from"./Login.kXXM0ZeX.js";import{InjectedConnector as w}from"./thirdweb-dev-wallets-evm-connectors-injected.browser.esm.hOn4tOex.js";import"./index.hfxd0CuE.js";import"./tokens.xGG2VBAi.js";import"./url-bc88b2b6.browser.esm.TxzGMoGi.js";class y extends w{constructor(t){const o={...{name:"Core Wallet",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:m},...t.options};super({chains:t.chains,options:o,connectorStorage:t.connectorStorage}),h(this,"id",d.coreWallet)}async connect(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const e=await this.getProvider();if(!e)throw new u;this.setupListeners(),this.emit("message",{type:"connecting"});let o=null;if(this.options?.shimDisconnect&&!this.connectorStorage.getItem(this.shimDisconnectKey)&&(o=await this.getAccount().catch(()=>null),!!o))try{await e.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(c){if(this.isUserRejectedRequestError(c))throw new a(c)}if(!o){const s=await e.request({method:"eth_requestAccounts"});o=l(s[0])}let n=await this.getChainId(),i=this.isChainUnsupported(n);if(t.chainId&&n!==t.chainId)try{await this.switchChain(t.chainId),n=t.chainId,i=this.isChainUnsupported(t.chainId)}catch(s){console.error(`Could not switch to chain id : ${t.chainId}`,s)}this.options?.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const r={chain:{id:n,unsupported:i},provider:e,account:o};return this.emit("connect",r),r}catch(e){throw this.isUserRejectedRequestError(e)?new a(e):e.code===-32002?new p(e):e}}async switchAccount(){await(await this.getProvider()).request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}}export{y as CoreWalletConnector};
